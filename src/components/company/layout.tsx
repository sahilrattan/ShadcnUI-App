"use client";
import { useState, useEffect } from "react";
import { Building2, Plus, AlertCircle, Trash2 } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Alert, AlertDescription } from "@/components/ui/alert";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
} from "@/components/ui/alert-dialog";
import { CompanyListingTable } from "@/components/company/CompanyListing";
import { CompanyCrudDialogs } from "@/components/company/CompanyCrud";
import type { Company, CompanyFormData } from "./types";
import { CompanyService } from "@/api/services/CompanyService"; // Import the generated API client

export default function CompanyManagementPage() {
  const [companies, setCompanies] = useState<Company[]>([]);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(true);
  const [selectedCompany, setSelectedCompany] = useState<Company | null>(null);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isDetailsDialogOpen, setIsDetailsDialogOpen] = useState(false);
  const [isConfirmDeleteDialogOpen, setIsConfirmDeleteDialogOpen] =
    useState(false);
  const [companyToDeleteId, setCompanyToDeleteId] = useState<string | null>(
    null
  );

  // Load companies from API
  const loadCompanies = async () => {
    try {
      setIsLoading(true);
      const response = await CompanyService.getApiVCompany("1.0");
      setCompanies(response.data || []);
      setError("");
    } catch (e) {
      console.error("Failed to load companies:", e);
      setError("Failed to load company data. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  // Load companies on mount
  useEffect(() => {
    loadCompanies();
  }, []);

  const handleAddCompany = async (newCompanyData: CompanyFormData) => {
    try {
      setIsLoading(true);
      const response = await CompanyService.postApiVCompany("1.0", {
        companySiteId: newCompanyData.companySiteId, // ADDED: Include companySiteId
        // companyId is typically generated by backend for new companies, so it's not sent on creation
        name: newCompanyData.name,
        description: newCompanyData.description,
        email: newCompanyData.email,
        phone: newCompanyData.phone,
        website: newCompanyData.website,
        addressLine1: newCompanyData.addressLine1,
        addressLine2: newCompanyData.addressLine2,
        city: newCompanyData.city,
        stateId: newCompanyData.stateId,
        countryId: newCompanyData.countryId,
        zipCode: newCompanyData.zipCode,
      });
      if (response.data) {
        await loadCompanies(); // Refresh the list
        setError("");
        // setIsCreateDialogOpen(false); // REMOVED: Dialog closure handled by CompanyFormDialog
      }
    } catch (e) {
      console.error("Failed to add company:", e);
      setError("Failed to add company. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleUpdateCompany = async (updatedCompany: Company) => {
    try {
      setIsLoading(true);
      const response = await CompanyService.putApiVCompany("1.0", {
        companyId: updatedCompany.companyId,
        companySiteId: updatedCompany.companySiteId, // ADDED: Include companySiteId
        name: updatedCompany.name,
        description: updatedCompany.description,
        email: updatedCompany.email,
        phone: updatedCompany.phone,
        website: updatedCompany.website,
        addressLine1: updatedCompany.addressLine1,
        addressLine2: updatedCompany.addressLine2,
        city: updatedCompany.city,
        stateId: updatedCompany.stateId,
        countryId: updatedCompany.countryId,
        zipCode: updatedCompany.zipCode,
      });
      if (response.data) {
        await loadCompanies();
        setError("");
        setSelectedCompany(null);
      }
    } catch (e) {
      console.error("Failed to update company:", e);
      setError("Failed to update company. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const handleDeleteCompany = (companyId: string) => {
    setCompanyToDeleteId(companyId);
    setIsConfirmDeleteDialogOpen(true);
  };

  const confirmDelete = async () => {
    if (!companyToDeleteId) return;
    try {
      setIsLoading(true);
      const response = await CompanyService.deleteCompany(
        companyToDeleteId,
        "1.0"
      );
      if (response.data) {
        await loadCompanies();
        setError("");
        setCompanyToDeleteId(null);
        setIsConfirmDeleteDialogOpen(false);
      }
    } catch (e) {
      console.error("Failed to delete company:", e);
      setError("Failed to delete company. Please try again.");
    } finally {
      setIsLoading(false);
    }
  };

  const openEditDialog = (company: Company) => {
    setSelectedCompany(company);
    setIsEditDialogOpen(true);
  };

  const openDetailsDialog = (company: Company) => {
    setSelectedCompany(company);
    setIsDetailsDialogOpen(true);
    console.log("Company selected for details:", company); // Add this line
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950">
      <div className="container mx-auto p-4 md:p-6 lg:p-8 max-w-9xl">
        {/* Header Section */}
        <div className="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-6 mb-10">
          <div className="flex items-center gap-4">
            <div className="p-4 bg-primary/10 rounded-2xl shadow-md">
              <Building2 className="h-6 w-6 text-primary" />
            </div>
            <div>
              <h1 className="text-2xl md:text-2xl font-extrabold tracking-tight text-gray-900 dark:text-gray-50">
                Company Management
              </h1>
              <p className="text-muted-foreground text-md mt-1">
                Manage your company directory with ease
              </p>
            </div>
          </div>
          <Button
            size="lg"
            onClick={() => {
              setSelectedCompany(null);
              setIsCreateDialogOpen(true);
            }}
            className="bg-primary hover:bg-primary/90 text-white shadow-lg rounded-xl transition-all duration-200 ease-in-out transform hover:-translate-y-0.5"
          >
            <Plus className="h-5 w-5 mr-2" />
            Add New Company
          </Button>
        </div>
        {/* Error Alert */}
        {error && (
          <Alert
            variant="destructive"
            className="mb-8 border-red-200 bg-red-50 dark:bg-red-950 dark:border-red-800 text-red-800 dark:text-red-200 rounded-lg shadow-sm"
          >
            <AlertCircle className="h-5 w-5 text-red-600 dark:text-red-400" />
            <AlertDescription className="font-medium">{error}</AlertDescription>
          </Alert>
        )}
        {/* Company Listing Table */}
        <CompanyListingTable
          companies={companies}
          isLoading={isLoading}
          onEdit={openEditDialog}
          onDelete={handleDeleteCompany}
          onDetails={openDetailsDialog}
        />
        {/* Company CRUD Dialogs */}
        <CompanyCrudDialogs
          isCreateDialogOpen={isCreateDialogOpen}
          setIsCreateDialogOpen={setIsCreateDialogOpen}
          onAddCompany={handleAddCompany}
          onUpdateCompany={handleUpdateCompany}
          selectedCompany={selectedCompany}
          isEditDialogOpen={isEditDialogOpen}
          setIsEditDialogOpen={setIsEditDialogOpen}
          isDetailsDialogOpen={isDetailsDialogOpen}
          setIsDetailsDialogOpen={setIsDetailsDialogOpen}
        />
        {/* Delete Confirmation AlertDialog */}
        <AlertDialog
          open={isConfirmDeleteDialogOpen}
          onOpenChange={setIsConfirmDeleteDialogOpen}
        >
          <AlertDialogContent className="rounded-xl shadow-2xl">
            <AlertDialogHeader className="flex flex-col items-center text-center space-y-4">
              <div className="p-3 bg-red-100 dark:bg-red-900 rounded-full">
                <Trash2 className="h-8 w-8 text-red-600 dark:text-red-400" />
              </div>
              <AlertDialogTitle className="text-2xl font-bold text-gray-900 dark:text-gray-50">
                Are you absolutely sure?
              </AlertDialogTitle>
              <AlertDialogDescription className="text-base text-muted-foreground">
                This action cannot be undone. This will permanently delete the
                company and remove its data from our records.
              </AlertDialogDescription>
            </AlertDialogHeader>
            <AlertDialogFooter className="flex-col-reverse sm:flex-row sm:justify-center gap-3 pt-4">
              <AlertDialogCancel className="bg-transparent border border-gray-300 hover:bg-gray-100 dark:border-gray-700 dark:hover:bg-gray-800 rounded-lg transition-all duration-200">
                Cancel
              </AlertDialogCancel>
              <AlertDialogAction
                onClick={confirmDelete}
                className="bg-red-600 hover:bg-red-700 text-white rounded-lg transition-all duration-200"
              >
                Delete
              </AlertDialogAction>
            </AlertDialogFooter>
          </AlertDialogContent>
        </AlertDialog>
      </div>
    </div>
  );
}
