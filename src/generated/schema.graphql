# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AchievementAward {
  assets: [Asset!]
  associatedWith: String!
  description: String!
  id: ID!
  isDeleted: Boolean
  issuer: String!
  issuerDate: DateTimeISO!
  lastModifiedBy: String
  profileId: Float!
  recordedBy: String
  title: String!
}

type AchievementAwardConnection {
  edges: [AchievementAwardEdge!]!
  pageInfo: PageInfo!
}

type AchievementAwardEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: AchievementAward!
}

type AdditionalInfo {
  coveringLetter: String
  id: ID!
  lastModifiedBy: String
  profileId: Float!
  recordedBy: String
  statementOfPurpose: String
}

type Asset {
  achievementAward: AchievementAward!
  desc: String!
  fileType: String
  id: ID!
  isDeleted: Boolean!
  lastModifiedBy: String!
  name: String
  recordedBy: String!
  type: String!
  url: String
  workExperience: WorkExperience!
}

type AssetConnection {
  edges: [AssetEdge!]!
  pageInfo: PageInfo!
}

type AssetEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Asset!
}

input AssetInput {
  desc: String
  name: String
  type: AssetType
  url: String!
}

enum AssetType {
  Link
  Upload
}

type CandidateSkill {
  id: ID!
  internship: String
  isDeleted: Boolean
  lastModifiedBy: String
  name: String!
  profileId: Float!
  recordedBy: String
  workExperience: String
}

type CandidateSkillConnection {
  edges: [CandidateSkillEdge!]!
  pageInfo: PageInfo!
}

type CandidateSkillEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: CandidateSkill!
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  token: String!
}

type City {
  id: ID!
  lastModifiedBy: String!
  latitude: Float
  longitude: Float
  name: String!
  recordedBy: String!
  stateId: Float!
  wikiDataId: String
}

type CityConnection {
  edges: [CityEdge!]!
  pageInfo: PageInfo!
}

type CityEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: City!
}

input CompanyAdminInput {
  email: String!
  firstName: String!
  lastName: String!
  organisationName: String!
  password: String!
  phone: String!
  token: String!
}

type Country {
  capital: String!
  currency: String!
  currencyName: String!
  currencySymbol: String!
  emoji: String!
  emojiU: String!
  id: ID!
  iso2: String!
  iso3: String!
  lastModifiedBy: String!
  latitude: Float!
  longitude: Float!
  name: String!
  nationality: String!
  native: String!
  numericCode: String!
  phoneCode: String!
  recordedBy: String!
  regionId: Float!
  regionName: String!
  subregionId: Float!
  subregionName: String!
  tld: String!
}

type CountryConnection {
  edges: [CountryEdge!]!
  pageInfo: PageInfo!
}

type CountryEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Country!
}

input CreatePasswordInput {
  password: String!
  token: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

input DeleteFormDataInput {
  alternateFormId: String!
}

type Document {
  formAlternateId: String!
  formId: Float!
  id: ID!
  isDeleted: Boolean!
  isPdf: Boolean!
  lastModifiedBy: String!
  recordedBy: String!
  type: String!
  url: String!
}

type DocumentConnection {
  edges: [DocumentEdge!]!
  pageInfo: PageInfo!
}

type DocumentEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Document!
}

input DocumentInput {
  alternateId: String!
  formId: Float!
  type: String!
  url: String!
}

type Education {
  activitiesAndSocities: String
  college: String!
  degree: String!
  endDate: DateTimeISO!
  fieldOfStudy: String!
  grade: String
  id: ID!
  isDeleted: Boolean!
  lastModifiedBy: String
  profileId: Float!
  recordedBy: String!
  startDate: DateTimeISO!
}

type EducationConnection {
  edges: [EducationEdge!]!
  pageInfo: PageInfo!
}

type EducationEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Education!
}

type FormData {
  alternateFormId: String
  createdAt: DateTimeISO!
  formLinkDesc: String
  formLinkName: String
  id: ID!
  isDeleted: Boolean
  isPublished: Boolean
  lastModifiedBy: String!
  recordedBy: String!
  submissions: [Submission!]
  templateRow: String
  type: String
  user: User!
  userId: String!
}

type FormDataConnection {
  edges: [FormDataEdge!]!
  pageInfo: PageInfo!
}

type FormDataEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: FormData!
}

input FormDataInput {
  alternateFormId: String!
  templateRow: String!
  userId: String!
}

input LinkNameFormData {
  alternateFormId: String!
  formLinkDesc: String!
  formLinkName: String!
}

type Mutation {
  addFormData(input: FormDataInput!): FormData!
  addFormSubmission(input: SubmissionInput!): Submission!
  addLinkNameData(input: LinkNameFormData!): FormData!
  changePassword(input: ChangePasswordInput!): User!
  createPassword(input: CreatePasswordInput!): User!
  deleteFormData(input: DeleteFormDataInput!): FormData!
  publishFormData(input: PulishFormDataInput!): FormData!
  registerCompanyAdmin(input: CompanyAdminInput!): User!
  registerUser(input: UserInput!): User!
  removeAchievementAwardById(achievementAwardId: Float!): AchievementAward!
  removeAssetByAchievementAwardById(achievementAwardId: Float!): Asset!
  removeAssetByWorkExperienceById(workExperienceId: Float!): Asset!
  removeEducationAndQualification(educationId: Float!): Education!
  removeFormDocument(documentId: Float!): Document!
  removeWorkExperienceById(workExperienceId: Float!): WorkExperience!
  removecandidateSkill(candidateSkillId: Float!): CandidateSkill!
  resetPassword(input: ResetPasswordInput!): Boolean!
  saveAchievementAward(input: SaveAchievementAwardInput!): AchievementAward!
  saveAdditonalInfo(input: SaveAdditionalInfoInput!): AdditionalInfo!
  saveCandidateSkill(input: SaveCandidateSkillsInput!): CandidateSkill!
  saveEducationAndQualification(input: SaveEducationInput!): Education!
  savePersonalInformation(input: SavePersonalInfoInput!): Profile!
  saveQuestionaireAnswer(questions: [SaveQuestionaireAnsInput!]!): [QuestionaireAnswer!]!
  saveWorkExperience(input: SaveWorkExperienceInput!): WorkExperience!
  sendForgetPassLink(email: String!): Boolean!
  updateAchievementAwardById(achievementAwardId: Float!, input: SaveAchievementAwardInput!): AchievementAward!
  updateCandidateSkillById(candidateSkillId: Float!, input: SaveCandidateSkillsInput!): CandidateSkill!
  updateEducationById(educationId: Float!, input: SaveEducationInput!): Education!
  updateFormData(input: UpdateFormDataInput!): FormData!
  updateFormDocument(input: [DocumentInput!]!): [Document!]!
  updateWorkExperienceById(input: SaveWorkExperienceInput!, workExperienceId: Float!): WorkExperience!
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  totalCount: Int!
}

type Profile {
  additionalInfo: AdditionalInfo
  addressLineOne: String!
  addressLineTwo: String!
  alternateEmail: String
  alternatePhone: String
  batchId: String!
  candidateSkills: [CandidateSkill!]
  careOfContact: String
  careOfName: String
  careOfType: String
  city: City
  cityId: Float!
  collegeId: String!
  country: Country
  countryId: Float!
  courseId: String!
  currentAddressLineOne: String!
  currentAddressLineTwo: String!
  currentCity: City
  currentCityId: Float!
  currentCountry: Country
  currentCountryId: Float!
  currentState: State
  currentStateId: Float!
  currentZipCode: String!
  dob: DateTimeISO!
  educations: [Education!]
  email: String
  firstName: String
  gender: String!
  id: ID!
  lastModifiedBy: String!
  lastName: String
  phone: String!
  profileType: String!
  questionaireAnswer: [QuestionaireAnswer!]
  recordedBy: String!
  state: State
  stateId: Float!
  userId: String!
  workExperience: [WorkExperience!]
  zipCode: String!
}

type ProfileConnection {
  edges: [ProfileEdge!]!
  pageInfo: PageInfo!
}

type ProfileEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Profile!
}

input PulishFormDataInput {
  alternateFormId: String!
  formLinkName: String!
}

type Query {
  achievementAwards(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): AchievementAwardConnection!
  addionalInfo: AdditionalInfo!
  additionalInfoById(addId: Float!): AdditionalInfo!
  candidateSkills(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): CandidateSkillConnection!
  cities(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
    stateId: Float
  ): CityConnection!
  countries(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): CountryConnection!
  educations(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): EducationConnection!
  formDataByFormId(formId: String!, isDeleted: Boolean! = false): FormData!
  formDataByFormLinkName(formLinkName: String!, isDeleted: Boolean! = false): FormData!
  formDataByUserId(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean! = false

    """Paginate last"""
    last: Float
    userId: String!
  ): FormDataConnection!
  getAllFormData(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): FormDataConnection!
  getAwardById(awardId: Float!): AchievementAward!
  getEducationById(educationId: Float!): Education!
  getEducationByProfileId(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
    profileId: Float!
  ): EducationConnection!
  getFileByFormId(formId: String!): [Document!]!
  getFilesByFormId(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    formId: String!

    """Paginate last"""
    last: Float
  ): DocumentConnection!
  getFormSubmission(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): SubmissionConnection!
  getFormSubmissionByFormId(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    formId: Float!

    """Paginate last"""
    last: Float
  ): SubmissionConnection!
  getTemplateByFormId(formId: String!): FormData!
  getWorkExperienceById(workExperienceId: Float!): WorkExperience!
  getcandidateSkillById(candidateSkillId: Float!): CandidateSkill!
  myAssets(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): AssetConnection!
  myFormData(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): FormDataConnection!
  myPersonalInfo: Profile!
  myWorkExperience(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float
    isDeleted: Boolean = false

    """Paginate last"""
    last: Float
  ): WorkExperienceConnection!
  profileById(profileId: String!): Profile!
  profiles(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): ProfileConnection!
  questionaireAns(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): QuestionaireAnswerConnection!
  questions(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): QuestionConnection!
  states(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String
    countryId: Float

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): StateConnection!
  upload_getSignedUrl(input: UploadInput!): String!
  userById(userId: String!): User!
  users(
    """Paginate after opaque cursor"""
    after: String

    """Paginate before opaque cursor"""
    before: String

    """Paginate first"""
    first: Float

    """Paginate last"""
    last: Float
  ): UserConnection!
  viewer: Viewer!
}

type Question {
  id: ID!
  lastModifiedBy: String!
  recordedBy: String!
  text: String
}

type QuestionConnection {
  edges: [QuestionEdge!]!
  pageInfo: PageInfo!
}

type QuestionEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Question!
}

type QuestionaireAnswer {
  answer: String!
  id: ID!
  lastModifiedBy: String!
  profileId: Float
  question: Question
  questionId: Float!
  recordedBy: String!
}

type QuestionaireAnswerConnection {
  edges: [QuestionaireAnswerEdge!]!
  pageInfo: PageInfo!
}

type QuestionaireAnswerEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: QuestionaireAnswer!
}

input ResetPasswordInput {
  code: String!
  password: String!
  token: String!
}

input SaveAchievementAwardInput {
  assets: [AssetInput!]
  associatedWith: String
  description: String
  issuer: String
  issuerDate: DateTimeISO
  title: String!
}

input SaveAdditionalInfoInput {
  coveringLetter: String
  statementOfPurpose: String
}

input SaveCandidateSkillsInput {
  name: String!
}

input SaveEducationInput {
  activitiesAndSocities: String
  college: String!
  degree: String!
  endDate: DateTimeISO!
  fieldOfStudy: String!
  grade: String!
  percentage: String
  startDate: DateTimeISO!
}

input SavePersonalInfoInput {
  addressLineOne: String
  addressLineTwo: String
  alternateEmail: String
  alternatePhone: String
  careOfContact: String!
  careOfName: String
  careOfType: String!
  cityId: Float
  countryId: Float
  currentAddressLineOne: String
  currentAddressLineTwo: String
  currentCityId: Float
  currentCountryId: Float
  currentStateId: Float
  currentZipCode: String
  dob: DateTimeISO!
  email: String
  firstName: String!
  gender: String!
  lastName: String!
  phone: String
  stateId: Float
  zipCode: String
}

input SaveQuestionaireAnsInput {
  answer: String
  id: Float
  questionId: Float!
}

input SaveWorkExperienceInput {
  assets: [AssetInput!]
  companyName: String
  description: String
  employmentType: String
  endDate: DateTimeISO
  location: String
  locationType: String
  startDate: DateTimeISO
  title: String!
}

type State {
  countryId: Float!
  id: ID!
  lastModifiedBy: String!
  latitude: Float
  longitude: Float
  name: String!
  recordedBy: String!
  stateCode: String!
  type: String
}

type StateConnection {
  edges: [StateEdge!]!
  pageInfo: PageInfo!
}

type StateEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: State!
}

type Submission {
  formAlternateId: String!
  formId: Float!
  id: ID!
  jsonData: String!
  lastModifiedBy: String!
  recordedBy: String!
}

type SubmissionConnection {
  edges: [SubmissionEdge!]!
  pageInfo: PageInfo!
}

type SubmissionEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: Submission!
}

input SubmissionInput {
  formAlternateId: String!
  formId: Float!
  jsonData: String!
  token: String!
}

input UpdateFormDataInput {
  alternateFormId: String!
  templateRow: String!
}

input UploadInput {
  mimeType: String!
  name: String!
  path: String!
}

type User {
  accessType: String!
  email: String!
  emailVerified: DateTimeISO!
  firstName: String
  id: ID!
  image: String!
  lastModifiedBy: String!
  lastName: String
  name: String
  organisationName: String
  phone: String!
  profile: Profile
  recordedBy: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: User!
}

input UserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
  phone: String!
  token: String!
}

type Viewer {
  expires: DateTimeISO
  user: User
}

type WorkExperience {
  assets: [Asset!]
  companyName: String!
  description: String!
  employmentType: String!
  endDate: DateTimeISO!
  id: ID!
  isDeleted: Boolean!
  location: String!
  locationType: String!
  profileId: Float!
  startDate: DateTimeISO!
  title: String!
}

type WorkExperienceConnection {
  edges: [WorkExperienceEdge!]!
  pageInfo: PageInfo!
}

type WorkExperienceEdge {
  """Used in `before` and `after` args"""
  cursor: String!
  node: WorkExperience!
}